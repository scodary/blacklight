import math
import pylab

# 380 - 780 nm (by 5nm)
CIE_COLOR_MATCH = [[0.0014,0.0000,0.0065], [0.0022,0.0001,0.0105], [0.0042,0.0001,0.0201],
[0.0076,0.0002,0.0362], [0.0143,0.0004,0.0679], [0.0232,0.0006,0.1102],
[0.0435,0.0012,0.2074], [0.0776,0.0022,0.3713], [0.1344,0.0040,0.6456],
[0.2148,0.0073,1.0391], [0.2839,0.0116,1.3856], [0.3285,0.0168,1.6230],
[0.3483,0.0230,1.7471], [0.3481,0.0298,1.7826], [0.3362,0.0380,1.7721],
[0.3187,0.0480,1.7441], [0.2908,0.0600,1.6692], [0.2511,0.0739,1.5281],
[0.1954,0.0910,1.2876], [0.1421,0.1126,1.0419], [0.0956,0.1390,0.8130],
[0.0580,0.1693,0.6162], [0.0320,0.2080,0.4652], [0.0147,0.2586,0.3533],
[0.0049,0.3230,0.2720], [0.0024,0.4073,0.2123], [0.0093,0.5030,0.1582],
[0.0291,0.6082,0.1117], [0.0633,0.7100,0.0782], [0.1096,0.7932,0.0573],
[0.1655,0.8620,0.0422], [0.2257,0.9149,0.0298], [0.2904,0.9540,0.0203],
[0.3597,0.9803,0.0134], [0.4334,0.9950,0.0087], [0.5121,1.0000,0.0057],
[0.5945,0.9950,0.0039], [0.6784,0.9786,0.0027], [0.7621,0.9520,0.0021],
[0.8425,0.9154,0.0018], [0.9163,0.8700,0.0017], [0.9786,0.8163,0.0014],
[1.0263,0.7570,0.0011], [1.0567,0.6949,0.0010], [1.0622,0.6310,0.0008],
[1.0456,0.5668,0.0006], [1.0026,0.5030,0.0003], [0.9384,0.4412,0.0002],
[0.8544,0.3810,0.0002], [0.7514,0.3210,0.0001], [0.6424,0.2650,0.0000],
[0.5419,0.2170,0.0000], [0.4479,0.1750,0.0000], [0.3608,0.1382,0.0000],
[0.2835,0.1070,0.0000], [0.2187,0.0816,0.0000], [0.1649,0.0610,0.0000],
[0.1212,0.0446,0.0000], [0.0874,0.0320,0.0000], [0.0636,0.0232,0.0000],
[0.0468,0.0170,0.0000], [0.0329,0.0119,0.0000], [0.0227,0.0082,0.0000],
[0.0158,0.0057,0.0000], [0.0114,0.0041,0.0000], [0.0081,0.0029,0.0000],
[0.0058,0.0021,0.0000], [0.0041,0.0015,0.0000], [0.0029,0.0010,0.0000],
[0.0020,0.0007,0.0000], [0.0014,0.0005,0.0000], [0.0010,0.0004,0.0000],
[0.0007,0.0002,0.0000], [0.0005,0.0002,0.0000], [0.0003,0.0001,0.0000],
[0.0002,0.0001,0.0000], [0.0002,0.0001,0.0000], [0.0001,0.0000,0.0000],
[0.0001,0.0000,0.0000], [0.0001,0.0000,0.0000], [0.0000,0.0000,0.0000]]

RED_NORM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029498525073746317, 0.005899705014749263, 0.008849557522123894, 0.014749262536873158, 0.020648967551622422, 0.035398230088495575, 0.04719764011799411, 0.08849557522123894, 0.16224188790560476, 0.2949852507374632, 0.17699115044247787, 0.10324483775811209, 0.020648967551622422, 0.008849557522123894, 0.005899705014749263, 0.0029498525073746317, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

GREEN_NORM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011273957158962802, 0.0022547914317925604, 0.0033821871476888404, 0.004509582863585121, 0.005636978579481401, 0.011273957158962802, 0.019165727170236763, 0.028184892897407002, 0.056369785794814005, 0.0789177001127396, 0.1025930101465615, 0.11273957158962801, 0.10710259301014662, 0.09808342728297637, 0.08117249154453217, 0.0676437429537768, 0.05298759864712516, 0.04509582863585121, 0.036076662908680966, 0.022547914317925605, 0.0169109357384442, 0.011273957158962802, 0.009019165727170242, 0.005636978579481401, 0.004509582863585121, 0.004509582863585121, 0.0033821871476888404, 0.0033821871476888404, 0.0022547914317925604, 0.0011273957158962802, 0.0011273957158962802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

BLUE_NORM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020242914979757085, 0.006072874493927125, 0.018218623481781375, 0.03441295546558704, 0.05668016194331984, 0.12145748987854249, 0.1923076923076923, 0.18218623481781376, 0.13765182186234817, 0.08502024291497974, 0.06477732793522267, 0.03846153846153846, 0.032388663967611336, 0.01417004048582996, 0.008097165991902834, 0.004048582995951417, 0.0020242914979757085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

WHITE_NORM = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0005827505827505828, 0.0011655011655011655, 0.0017482517482517483, 0.005244755244755244, 0.00874125874125874, 0.015734265734265736, 0.030303030303030304, 0.04079254079254079, 0.05827505827505827, 0.046620046620046623, 0.025058275058275056, 0.0168997668997669, 0.01282051282051282, 0.009906759906759908, 0.009324009324009324, 0.009324009324009324, 0.009324009324009324, 0.010489510489510488, 0.011655011655011656, 0.014568764568764568, 0.018648018648018648, 0.022144522144522144, 0.023892773892773892, 0.024475524475524476, 0.025058275058275056, 0.02564102564102564, 0.02564102564102564, 0.02564102564102564, 0.02564102564102564, 0.02564102564102564, 0.02564102564102564, 0.025058275058275056, 0.025058275058275056, 0.025058275058275056, 0.024475524475524476, 0.023892773892773892, 0.023892773892773892, 0.023310023310023312, 0.022144522144522144, 0.020979020979020976, 0.019230769230769232, 0.01748251748251748, 0.01631701631701632, 0.014568764568764568, 0.013986013986013986, 0.01282051282051282, 0.011655011655011656, 0.010489510489510488, 0.009906759906759908, 0.007575757575757576, 0.00641025641025641, 0.005827505827505828, 0.005244755244755244, 0.004662004662004662, 0.00407925407925408, 0.0034965034965034965, 0.0034965034965034965, 0.002913752913752914, 0.002331002331002331, 0.0017482517482517483, 0.0017482517482517483, 0.0011655011655011655, 0.0011655011655011655, 0.0005827505827505828, 0.0005827505827505828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

brightness = {'red': 30.6, 'green': 67.2, 'blue': 8.2, 'white': 100}

def nm_to_cm(nm):
    if nm <= 380:
        return CIE_COLOR_MATCH[0]
    ind = (int(nm) - 380)/5
    if ind >= len(CIE_COLOR_MATCH) - 1:
        return CIE_COLOR_MATCH[-1]
    err = (float(nm) - 380.0)/5.0 - ind
    result = [0.0, 0.0, 0.0]
    for i in range(3):
        result[i] = CIE_COLOR_MATCH[ind][i]*(1.0 - err) + err*CIE_COLOR_MATCH[ind + 1][i]
    return result


def bb_spectrum(wavelength, bbTemp=5000):
    wlm = wavelength * 1e-9
    return (3.74183e-16 * math.pow(wlm, -5.0)) / (math.exp(1.4388e-2 / (wlm * bbTemp)) - 1.0)

def bb_norm(temp):
    sp = [bb_spectrum(i,temp) for i in range(380, 785, 5)]
    return [float(i)/sum(sp) for i in sp]

def spec_to_cie(spec):
    result = [0.0, 0.0, 0.0]
    for nm, sp in zip(range(380, 785, 5), spec):
        cm = nm_to_cm(nm)
        for i in range(3):
            result[i] += sp*cm[i]
    XYZ = sum(result)
    result = [i/XYZ for i in result]
    return result

def bb_to_cie(temp):
    return spec_to_cie(bb_norm(temp))

def rgbw_to_cie(r, g, b, w):
    spec = []
    for i in range(len(RED_NORM)):
        res = 0.0
        res += RED_NORM[i]*brightness['red']*r
        res += GREEN_NORM[i]*brightness['green']*g
        res += BLUE_NORM[i]*brightness['blue']*b
        res += WHITE_NORM[i]*brightness['white']*w
        spec.append(res)
    return spec_to_cie(spec)

def cie_err(e1, e2, target):
    err1 = sum([(e1[i] - target[i])**2 for i in range(len(e1))])
    err2 = sum([(e2[i] - target[i])**2 for i in range(len(e2))])
    return err1 - err2

def total_error(temp, r, g, b, w):
    bb = bb_to_cie(temp)
    rgbw = rgbw_to_cie(r, g, b, w)
    return math.sqrt(sum([(rgbw[i] - bb[i])**2 for i in range(len(rgbw))]))

def get_gradient(temp, r, g, b, w, delta=0.01):
    bb = bb_to_cie(temp)
    rgbw = rgbw_to_cie(r, g, b, w)
    dr = cie_err(rgbw, rgbw_to_cie(r+delta, g, b, w), bb)
    dg = cie_err(rgbw, rgbw_to_cie(r, g+delta, b, w), bb)
    db = cie_err(rgbw, rgbw_to_cie(r, g, b+delta, w), bb)
    dw = cie_err(rgbw, rgbw_to_cie(r, g, b, w+delta), bb)
    return (dr, dg, db, dw)

def update_guess(temp, r, g, b, w):
    (dr, dg, db, dw) = get_gradient(temp, r, g, b, w)
    r = max(r + dr, 0)
    g = max(g + dg, 0)
    b = max(b + db, 0)
    w = max(w + dw, 0)
    return (r, g, b, w)

def find_rgbw(temp):
    r, g, b, w = (0.25, 0.25, 0.25, 0.25)
    err = 1000
    iterations = 0
    while err > 0.0001 and iterations < 1000:
        r, g, b, w = update_guess(temp, r, g, b, w)
        err = total_error(temp, r, g, b, w)
        iterations += 1
    return r, g, b, w

def rgbw_in_samples(temp):
    r, g, b, w = find_rgbw(temp)
    vals = [r, g, b, w]
    mval = max(vals)
    vals = [int(255*float(i)/mval) for i in vals]
    return vals

for temp in range(1000, 10250, 250):
    vals = rgbw_in_samples(temp)
    print "{{{}, {}, {}, {}}},".format(vals[0], vals[1], vals[2], vals[3])
